// 문제 설명

// 양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.
// 예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.
// 자연수 x를 입력받아 x가 하샤드 수인지 아닌지 검사하는 함수, solution을 완성해주세요.

// 제한 조건
// x는 1 이상, 10000 이하인 정수입니다.
function solution(x) {
    let a = String(x);
    let total = 0;
    for (let i = 0; i < a.length; i++) {
        total += Number(a[i]);
    }
    if (x % total === 0) {
        return true;
    }
    return false;
}

//=============================================

// 문제 설명

// 자연수 n이 매개변수로 주어집니다.
// n을 x로 나눈 나머지가 1이 되도록 하는 가장 작은 자연수 x를 return 하도록 solution 함수를 완성해주세요.
// 답이 항상 존재함은 증명될 수 있습니다.

function solution(n) {
    for (let i = 1; i <= n; i++) {
        if (n % i === 1) return i;
    }
}

//=============================================

// 문제 설명

// 두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.
// 예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.

function solution(a, b) {
    return ((a + b) * (Math.abs(b - a) + 1)) / 2;
}

//=============================================

// 문제 설명

// 1937년 Collatz란 사람에 의해 제기된 이 추측은,
// 주어진 수가 1이 될 때까지 다음 작업을 반복하면,
// 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

// 1-1. 입력된 수가 짝수라면 2로 나눕니다.
// 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
// 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.

// 예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다.
// 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요.
// 단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

function solution(num) {
    let count = 0;
    if (num === 1) return 0;

    for (let i = 0; i < 500; i++) {
        if (num % 2 === 0) {
            count++;
            num = num / 2;
            if (count === 500) return -1;
            if (num === 1) return count;
        }
        if (num % 2 === 1) {
            count++;
            num = num * 3 + 1;
            if (count === 500) return -1;
            if (num === 1) return count;
        }
    }
}

//=============================================

// 문제 설명

// String형 배열 seoul의 element중 "Kim"의 위치 x를 찾아,
// "김서방은 x에 있다"는 String을 반환하는 함수, solution을 완성하세요.
// seoul에 "Kim"은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.

// 제한 사항

// seoul은 길이 1 이상, 1000 이하인 배열입니다.
// seoul의 원소는 길이 1 이상, 20 이하인 문자열입니다.
// "Kim"은 반드시 seoul 안에 포함되어 있습니다.

function solution(seoul) {
    let x = seoul.indexOf("Kim");
    return `김서방은 ${x}에 있다`;
}
