React란?
    - 사용자 인터페이스를 구축하기 위한 선언적(코드를 예측 가능하고 디버그하기 쉽게 만들어 줌)이고, 
      효율적이며 유연한 JavaScript 라이브러리.
    -리액트로 화면을 구성하게 되면, 사용자가 볼 수 있는 여러 가지 컴포넌트로 구성되어 있다. 
     사용자에게 보여지는 UI 요소를 컴포넌트 단위로 구분하여(쪼개서) 구현할 수 있다.



React-Dom에 대해

    - React는 순수 자바스크립트이고, 이 자바스크립트를 이용해 컴포넌트를 만들어나간다.
      실제로 브라우저가 이해할 수 있는 것은 html, css, JavaScript 뿐이며, 이것들만 이용할 수 있다.

    그래서 바벨(babel)을 이용해 순수 자바스크립트로 변환이 된다.
    그리고 나서 우리가 만든 컴포넌트를 html과 연결하는 작업을 해줘야하는데 이것을 해주는 것이 바로 react-dom이다.
    결과적으로 사용자에게 궁극적으로 배포되어지는 것은 index.html이다.




컴포넌트(Components) 
    - 자바스크립트 함수와 유사하다. 
      (컴포넌트를 정의하는 가장 간단한 방법은 자바스크립트 함수를 작성하는 것이다.)
    - 하나의 페이지를 한 가지 이상의 기능을 수행하는 UI 단위로 분리한 것
    - 재사용이 용이하고 관리 및 유지 보수에 효율적
    - 리액트에서 정의하는 컴포넌트 종류는 크게 함수형 컴포넌트, 클래스형 컴포넌트 2가지가 있다.



렌더링(Rendering)
    - 웹문서는 브라우저에 표시되어야 할 정보들을 담고 있다. 
      이 정보들은 브라우저가 해석할 수 있는 프로그래밍 언어로 되어 있으며, 서비스를 제공하는 회사 혹은 개인의 서버에 저장되어 있다. 
      사용자(Client)는 url을 통해 그 정보를 요청 -> 요청을 받은 서버는 웹문서를 사용자 브라우저에 전달해주게 됨
      -> 그리고 나서, 브라우저가 사용자가 보기 좋고 편하게 표시하는 과정을 ‘렌더링’이라고 한다.



JSX
    - 리액트에서는 JSX 문법을 사용해서 요소를 만든다.(필수는 아니고 주로 그렇게 사용함)
      JSX는 html과 비슷하게 생겼지만, 자바스크립트의 확장 문법이다. 
      즉, html이 아니기 때문에 코드가 번들링되는 과정에서 babel이 html 문서로 변환시킨다.

-> 이러한 JSX 문법 덕분에 컴포넌트 별로 구성이 가능. 컴포넌트 별로 문서를 만들게 되면 재사용성이 좋아진다.




 Virtual DOM
    - DOM은 querySelector 나 getElementbyID 같은 것들로 요소를 찾아 직접 조작한다. 
        -> 이렇게 직접 요소를 조작하면 페이지 용량이 크면 클수록 느려지는 단점이 있다.
      
    - Virtual DOM은 CSR 방식으로 한번에 모든 정보를 받고 Virtual DOM 을 이용해 
      페이지 내에 변한 부분만을 감지해서 그 부분만 변경해주게 되면 훨씬 부담을 줄일 수 있다.


    Virtual DOM 동작 방식
       1. state(상태, 값)의 변화가 생긴다면 -> 
       2. 수정된 부분(컴포넌트)만을 실제 돔에 리랜더링 (...랜더링 최적화)




번들링(Bundling)
    - 번들링은 여러 제품이나 코드,모듈의 프로그램을 묶어서 패키지로 제공하는 행위를 의미한다.
      모듈(module)이란 분리된 파일이란 뜻이다. 즉, 번들링은 분리된 모듈을 하나로 합쳐주는 구나 라고 이해할 수 있다.
      모듈은 다른 모듈들과의 연계성을 띄어야 한다. 
      그래서 모듈 내부에는 import로 외부모듈의 기능을 가져오고, export로 외부 모듈에서의 접근을 허용하여 모듈의 기능을 내보낸다.

    -> 모듈끼리 import하고 export하면 되지 번들링이 왜 필요할까? 

        - 1) 여러 개의 파일을 브라우저에서 로딩한다면 네트워크가 그만큼 소모되어 속도가 저하될 수 있다.
        - 2) 모듈 간의 변수 충돌 등의 위험성이 존재한다. 
 
 * 이러한 번들링 작업을 하는 도구가 바로 Webpack 이다. (웹팩 말고도 여러가지가 있다.)




웹팩(Webpack)

    - 모듈 번들러
        모듈 => 한가지 이상의 기능을 하는 분리된 코드의 집함, 덩어리
        번들러 => 묶어주는 것

        html, css , js ,img
        너저분하게 분리되어있는 리로스들을 확장자명 혹은 특정 기준으로 분류하고 묶어주는 역할

        모듈 번들러인 웹팩을 사용하면 잘 정돈 되어있는 데이터에서 필요한 리소스만 찾을 수 있기 때문에
        네트워크 연산 비용이 줄어들게 됨

        1. 모듈 단위의 개발이 기능
        2. 네트워크 연산 비용 감소
        3. loader라는 기능을 통해 js가 로드할 수 없는 파일도 로드할 수 있는 상태로 컴파일(변환)
-------------------------------------------------------------------------------

* React는 대표적인 CSR, SPA 이다. CSR, SPA에 최적화 되어있음.

-------------------------------------------------------------------------------

CSR (Client Side Rendering)
    * 사용자가 웹 페이지 그린다
    사용자가 웹 페이지 접속 -> 프론트엔드 서버에 페이지를 랜더링할 때 필요한 리소스 전달

    ex) 페이지가 로드 되었을 때 상품 목록을 그려준다.
        이 상품 목록은 백엔드 서버로부터 응답 받은 데이터이다.

    위의 과정을 사용자가 하게되는 것
    사용자가 랜더링을 부담

    장점
        페이지에 필요한 리소스들을 사전에 미리 불러와 데이터를 캐싱(저장)하고 있다가
        URL에 맞는 페이지를 보여주기 때문에 초기 랜더링 이후의 랜더링 속도가 빠르다

    단점
        초기 페이지 로딩이 SSR보다 느리다.
        SEO(검색엔진최적화)에 불리
        검색엔진에 노출이 필요한 사이트를 제대로 걸러내지 못하므로 부적합 ( 페이지가 검색엔진이 검색하였을 때 빈화면이 노출 )


SSR (Server Side Rendering)
    * 서버에서 페이지를 그린다
    사용자가 웹 페이지에 접속 -> 서버에서 페이지를 랜더링 -> 랜더링된 페이지를 사용자에게 전달
    js가 로드 되기도 전에 완성된 페이지를 사용자가 먼저 확인

    장점
        SEO 유리 => 웹 사이트를 검색엔진이 크롤링하여 사용자에 제공 가능
        빠른 완성본 페이지 로딩 속도
        서버에서 랜더링을 부담하기 때문에 사용자가 느끼는 부담이 덜하다
    
    단점
        서버의 부담 (생산 비용 증가)
        무거운 페이지라면 오히려 초기 로딩이 CSR보다 오래 걸릴 가능성
        CSR보다 더 많은 생산비용, 추가 러닝 커브
        + 렌더링이 빠른 장점이 있지만 페이지를 이동할 때마다 화면 깜박임
        (화면이 로드될 때마다 화면이 백지로 변하고 다시 화면이 출력되는 과정)이 있다. 

-------------------------------------------------------------------------------

SPA, MPA

    SPA (Single Page Application)

        페이지 하나인 애플리케이션(.html 파일이 1개)
        reactJS와 같은 컴포넌트 기반 라이브러리 및 프레임워크는 SPA에 최적화
        사용자가 웹 사이트에 접속 당시 번들링 된 리소스들을 한번에 전달

        그리고 이를 캐싱해두었다가 url이 달라짐에 따라 html의 내부를 수정하여
        사용자에게 보내주는 것

        따라서 통상적으로 react의 파일 구조는 index.html 하나로만 구성되어 있음
        + 즉, 초반에 표시되는 index.html 파일 외에 html 문서는 없으며, 
          index.html 파일의 내용을 자바스크립트를 이용해 재 렌더링 해주는 방식으로 페이지를 구성


    MPA (Multi Page Application)

        페이지가 여러개인 애플리케이션 (.html 파일이 여러개)
        보통은 SSR 방식으로 요청마다 해당 페이지에 필요한 리소스를 불러온다.

-------------------------------------------------------------------------------

