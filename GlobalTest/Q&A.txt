
1. FLUX 패턴에 대하여 설명해보세요
    - (1) MVC 패턴 (Model, View, Controller)
      * Model (데이터 저장)
      * Controller (Model의 데이터를 관리(CRUD))
      * View (화면)

    [ Controller (Controller을 이용하여 Model의 데이터를 관리)
    --> Model (Model의 데이터가 변경되면 View로 전달) <--> View(사용자가 View를 통해 데이터를 입력하면 View 역시 => Model을 업데이트할 수 있다)]

===========> !! 문제는 애플리케이션의 규모가 커지면??   
MVC 패턴은 View가 다양한 상호작용을 위해 
여러 개의 Model을 동시에 업데이트하고 Model 역시 여러 개의 View에 데이터를 전달하는 상황이 발생 !!
~~~ 이렇게 많은 의존성을 가지면 Model의 개수가 많아질수록 각 Model에서 발생한 이벤트가 애플리케이션 전체로 퍼져나갈 때 이를 예측하기 힘들어 진다.

      ** So, 페이스북에서 MVC를 사용하게 되면 삽시간에 복잡해지므로 
         이 문제의 해결 방안으로 단방향 데이터 흐름을 가지는 Flux 패턴을 고안해냈다.

=======================================================
    - (2)Flux 패턴이란??
       [ action -> dispatcher -> model(store) -> view ]

        * action -> 변경할 데이터 객체, dispatcher를 통해서 store에 전달
        * dispatcher -> 데이터 흐름을 관리 (통로, 전달, 매개체)
        * store -> 상태(state)의 저장소, state를 변경할 수 있는 함수또한 가지고 있음
        * view -> 화면

    즉!!!!!!!?
    =>  action (사용자 기반 액션을 만들고) -> dispatcher(데이터 흐름을 관리하는 허브) 
        -> model(store) (데이터를 변경) -> view에 반영하는 단방향의 흐름으로 애플리케이션을 만드는 아키텍처이다. 


- 각 요소들은 단방향 흐름에 따라 순서대로 역할을 수행하고, View로부터 새로운 데이터 변경이 생기면 처음부터 다시 이 순서대로 실행
    = 이렇게 함으로써 예외 없이 데이터를 처리할 수 있게 되었다.

    
2. 아래의 hook 함수는 각각 어느 순간에 사용할까요
    (1) useReducer
    (2) useContext

3. 전역 상태 관리를 해야하는 이유는 무엇일까요

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세



   =============================================================

   useReducer 
   - useState가 컴포넌트 안에 있으면 재상용 불가. 
     더 복잡한 로직이 됐을 때 대신 사용하면 좋다.
   - setState 대신 dispatch -> 기계적인 말이다.  
   - useReducer 
   - 


