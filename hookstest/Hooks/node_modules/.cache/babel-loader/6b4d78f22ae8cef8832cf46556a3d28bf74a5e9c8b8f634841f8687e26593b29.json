{"ast":null,"code":"var _jsxFileName = \"/Users/seonyeong/Desktop/seonyeong/hookstest/Hooks/src/hooks/2.state/state1.js\",\n  _s = $RefreshSig$();\nimport PlayListMock from \"../../__mock__/playList.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction State1() {\n  _s();\n  /* \r\n  문제 1.\r\n    state를 다루기 위한 기초 문제입니다.\r\n  음악 목록 10가지의 mock data가 있습니다.\r\n    아래에 추가버튼을 눌러 목록에 리스트를 추가하고 \r\n  삭제 버턴을 눌렀을 때 데이터가 삭제될 수 있도록 해주세요\r\n  */\n\n  const [title, setTitle] = useState();\n  const [onState, setOnState] = useState(false);\n  const [singer, setSinger] = useState();\n  // const removeClick = useRef(null);\n  const [onRemove, setOnRemove] = useState([PlayListMock.playlist]);\n  console.log(PlayListMock.playlist);\n  /* 데이터 콘솔에 찍어두었으니 확인해볼 것 */\n\n  const addTitle = e => {\n    setTitle(e.target.value);\n  };\n  const addSinger = e => {\n    setSinger(e.target.value);\n  };\n  const onClickAdd = () => {\n    PlayListMock.playlist.push({\n      title: title,\n      signer: singer\n    });\n    setOnState(prev => !prev);\n  };\n  const onRemoveBtn = () => {\n    setOnRemove(onRemove.filter(el => el.title !== title));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Summer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Joe Hisaishi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uACE1\\uBA85 : \", /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uAC00\\uC218/\\uC791\\uACE1 : \", /*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"\\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(State1, \"gfzsKz7iZFNbXFVnVo3jbLuBY5A=\");\n_c = State1;\nexport default State1;\nvar _c;\n$RefreshReg$(_c, \"State1\");","map":{"version":3,"names":["PlayListMock","State1","title","setTitle","useState","onState","setOnState","singer","setSinger","onRemove","setOnRemove","playlist","console","log","addTitle","e","target","value","addSinger","onClickAdd","push","signer","prev","onRemoveBtn","filter","el"],"sources":["/Users/seonyeong/Desktop/seonyeong/hookstest/Hooks/src/hooks/2.state/state1.js"],"sourcesContent":["import PlayListMock from \"../../__mock__/playList.json\";\r\n\r\nfunction State1() {\r\n    /* \r\n    문제 1.\r\n\r\n    state를 다루기 위한 기초 문제입니다.\r\n    음악 목록 10가지의 mock data가 있습니다.\r\n\r\n    아래에 추가버튼을 눌러 목록에 리스트를 추가하고 \r\n    삭제 버턴을 눌렀을 때 데이터가 삭제될 수 있도록 해주세요\r\n  */\r\n\r\n    const [title, setTitle] = useState();\r\n    const [onState, setOnState] = useState(false);\r\n    const [singer, setSinger] = useState();\r\n    // const removeClick = useRef(null);\r\n    const [onRemove, setOnRemove] = useState([PlayListMock.playlist]);\r\n\r\n    console.log(PlayListMock.playlist);\r\n    /* 데이터 콘솔에 찍어두었으니 확인해볼 것 */\r\n\r\n    const addTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    };\r\n\r\n    const addSinger = (e) => {\r\n        setSinger(e.target.value);\r\n    };\r\n\r\n    const onClickAdd = () => {\r\n        PlayListMock.playlist.push({ title: title, signer: singer });\r\n        setOnState((prev) => !prev);\r\n    };\r\n\r\n    const onRemoveBtn = () => {\r\n        setOnRemove(onRemove.filter((el) => el.title !== title));\r\n    };\r\n    return (\r\n        <>\r\n            <ul>\r\n                {/* list */}\r\n                {/* 예시 데이터입니다 */}\r\n                <li>\r\n                    <h3>Summer</h3>\r\n                    <p>Joe Hisaishi</p>\r\n                </li>\r\n            </ul>\r\n            <div>\r\n                <p>\r\n                    곡명 : <input />\r\n                </p>\r\n                <p>\r\n                    가수/작곡 : <input />\r\n                </p>\r\n                <p>\r\n                    <button>추가</button>\r\n                </p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default State1;\r\n"],"mappings":";;AAAA,OAAOA,YAAY,MAAM,8BAA8B;AAAC;AAAA;AAExD,SAASC,MAAM,GAAG;EAAA;EACd;AACJ;AACA;AACA;AACA;AACA;AACA;;EAII,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,EAAE;EACpC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,EAAE;EACtC;EACA,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,CAACJ,YAAY,CAACW,QAAQ,CAAC,CAAC;EAEjEC,OAAO,CAACC,GAAG,CAACb,YAAY,CAACW,QAAQ,CAAC;EAClC;;EAEA,MAAMG,QAAQ,GAAIC,CAAC,IAAK;IACpBZ,QAAQ,CAACY,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,SAAS,GAAIH,CAAC,IAAK;IACrBP,SAAS,CAACO,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;EAED,MAAME,UAAU,GAAG,MAAM;IACrBnB,YAAY,CAACW,QAAQ,CAACS,IAAI,CAAC;MAAElB,KAAK,EAAEA,KAAK;MAAEmB,MAAM,EAAEd;IAAO,CAAC,CAAC;IAC5DD,UAAU,CAAEgB,IAAI,IAAK,CAACA,IAAI,CAAC;EAC/B,CAAC;EAED,MAAMC,WAAW,GAAG,MAAM;IACtBb,WAAW,CAACD,QAAQ,CAACe,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAACvB,KAAK,KAAKA,KAAK,CAAC,CAAC;EAC5D,CAAC;EACD,oBACI;IAAA,wBACI;MAAA,uBAGI;QAAA,wBACI;UAAA,UAAI;QAAM;UAAA;UAAA;UAAA;QAAA,QAAK,eACf;UAAA,UAAG;QAAY;UAAA;UAAA;UAAA;QAAA,QAAI;MAAA;QAAA;QAAA;QAAA;MAAA;IAClB;MAAA;MAAA;MAAA;IAAA,QACJ,eACL;MAAA,wBACI;QAAA,WAAG,iBACM;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QACd,eACJ;QAAA,WAAG,8BACS;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QACjB,eACJ;QAAA,uBACI;UAAA,UAAQ;QAAE;UAAA;UAAA;UAAA;QAAA;MAAS;QAAA;QAAA;QAAA;MAAA,QACnB;IAAA;MAAA;MAAA;MAAA;IAAA,QACF;EAAA,gBACP;AAEX;AAAC,GA3DQD,MAAM;AAAA,KAANA,MAAM;AA4Df,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}